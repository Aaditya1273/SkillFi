generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  walletAddress String? @unique
  username    String   @unique
  firstName   String?
  lastName    String?
  bio         String?
  avatar      String?
  skills      String[]
  hourlyRate  Float?
  location    String?
  timezone    String?
  isVerified  Boolean  @default(false)
  reputation  Float    @default(0)
  totalEarned Float    @default(0)
  password    String?
  emailVerified Boolean @default(false)
  walletConnectedAt DateTime?
  userType    String   @default("jobSeeker") // jobSeeker or jobProvider
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clientProjects    Project[]       @relation("ClientProjects")
  freelancerProjects Project[]      @relation("FreelancerProjects")
  proposals         Proposal[]
  sentMessages      Message[]       @relation("SentMessages")
  receivedMessages  Message[]       @relation("ReceivedMessages")
  reviews           Review[]        @relation("ReviewAuthor")
  receivedReviews   Review[]        @relation("ReviewTarget")
  socialAccounts    SocialAccount[]
  sessions          Session[]
  accounts          Account[]
  ratingsGiven      Rating[]        @relation("RatingsGiven")
  ratingsReceived   Rating[]        @relation("RatingsReceived")
  reputationRecord  UserReputation?
  reputationEvents  ReputationEvent[]
  referredById      String?
  referralCount     Int               @default(0)
  referralCodes     ReferralCode[]
  referralsMade     Referral[]        @relation("ReferralsMade")
  referralsReceived Referral[]        @relation("ReferralsReceived")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model SocialAccount {
  id         String   @id @default(cuid())
  userId     String
  provider   String   // google, github, linkedin
  providerId String
  profile    Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@map("social_accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  budget      Float
  deadline    DateTime?
  status      ProjectStatus @default(OPEN)
  skills      String[]
  category    String?
  clientId    String
  freelancerId String?
  contractAddress String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  client      User       @relation("ClientProjects", fields: [clientId], references: [id])
  freelancer  User?      @relation("FreelancerProjects", fields: [freelancerId], references: [id])
  proposals   Proposal[]
  messages    Message[]
  reviews     Review[]
  ratings     Rating[]

  @@map("projects")
}

model Proposal {
  id          String         @id @default(cuid())
  projectId   String
  freelancerId String
  bidAmount   Float
  description String
  deliveryTime Int           // in days
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  project     Project @relation(fields: [projectId], references: [id])
  freelancer  User    @relation(fields: [freelancerId], references: [id])

  @@unique([projectId, freelancerId])
  @@map("proposals")
}

model Message {
  id        String   @id @default(cuid())
  projectId String
  senderId  String
  receiverId String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  project  Project @relation(fields: [projectId], references: [id])
  sender   User    @relation("SentMessages", fields: [senderId], references: [id])
  receiver User    @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model Review {
  id         String @id @default(cuid())
  projectId  String
  authorId   String
  targetId   String
  rating     Int    // 1-5
  comment    String?
  createdAt  DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id])
  author  User    @relation("ReviewAuthor", fields: [authorId], references: [id])
  target  User    @relation("ReviewTarget", fields: [targetId], references: [id])

  @@unique([projectId, authorId])
  @@map("reviews")
}

model Rating {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  projectId  String
  score      Int      // 1-5
  comment    String?
  createdAt  DateTime @default(now())

  // Relations
  fromUser User    @relation("RatingsGiven", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User    @relation("RatingsReceived", fields: [toUserId], references: [id], onDelete: Cascade)
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, fromUserId])
  @@map("ratings")
}

model UserReputation {
  userId        String  @id
  score         Int     @default(0) // 0-100
  onChainScore  Int     @default(0)
  ratingScore   Int     @default(0)
  fraudPenalty  Int     @default(0)
  lastUpdatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_reputation")
}

enum ReputationEventType {
  ESCROW_COMPLETED
  ESCROW_DISPUTE_OPENED
  ESCROW_DISPUTE_WON
  ESCROW_DISPUTE_LOST
  CLIENT_RATING
  OTHER
}

model ReputationEvent {
  id        String               @id @default(cuid())
  userId    String
  type      ReputationEventType
  weight    Float                @default(0)
  delta     Float                @default(0)
  metadata  Json?
  createdAt DateTime             @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("reputation_events")
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ReferralCode {
  id        String   @id @default(cuid())
  code      String   @unique
  ownerId   String
  maxUses   Int?
  expiresAt DateTime?
  usesCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  referrals Referral[]

  @@map("referral_codes")
}

enum ReferralRole {
  FREELANCER
  CLIENT
}

model Referral {
  id         String      @id @default(cuid())
  referrerId String
  refereeId  String
  codeId     String
  role       ReferralRole
  createdAt  DateTime    @default(now())

  referrer User         @relation("ReferralsMade", fields: [referrerId], references: [id], onDelete: Cascade)
  referee  User         @relation("ReferralsReceived", fields: [refereeId], references: [id], onDelete: Cascade)
  code     ReferralCode @relation(fields: [codeId], references: [id], onDelete: Cascade)

  @@unique([refereeId])
  @@map("referrals")
}